{"list_changes": [{"file_name": "srai_core/script/srai_deploy.py", "changes": "\n\nimport asyncio\nimport\nasyncio\nimport json\nimport\njson\nimport sys\nimport\nsys\n\nfrom srai_core.command_handler_base import CommandHandlerBase\nfrom\nsrai_core\ncommand_handler_base\nimport\nCommandHandlerBase\nfrom srai_core.tools_docker import (\nfrom\nsrai_core\ntools_docker\nimport\n build_docker_async,\nbuild_docker_async\n get_image_tag,\nget_image_tag\n release_docker_local_to_aws_async,\nrelease_docker_local_to_aws_async\n remove_container,\nremove_container\n start_container_async,\nstart_container_async\n stop_container,\nstop_container\n)\n\n\nasync def srai_deploy():\nasync\ndef\nsrai_deploy\n if len(sys.argv) < 2:\nif\nlen\nsys\nargv\n<\n2\n print(\"Usage: deploy_docker deployment_file.json\")\nprint\n\"Usage: deploy_docker deployment_file.json\"\n sys.exit(1)\nsys\nexit\n1\n\n path_deployment_file = sys.argv[1]\npath_deployment_file\n=\nsys\nargv\n1\n with open(path_deployment_file) as f:\nwith\nopen\npath_deployment_file\nas\nf\n deployment = json.load(f)\ndeployment\n=\njson\nload\nf\n for build_target in deployment[\"list_build_target\"]:\nfor\nbuild_target\nin\ndeployment\n\"list_build_target\"\n command_handler = CommandHandlerBase.from_dict(build_target)\ncommand_handler\n=\nCommandHandlerBase\nfrom_dict\nbuild_target\n await build_docker_async(command_handler)\nawait\nbuild_docker_async\ncommand_handler\n\n for release_target in deployment[\"list_release_target\"]:\nfor\nrelease_target\nin\ndeployment\n\"list_release_target\"\n command_handler = CommandHandlerBase.from_dict(release_target)\ncommand_handler\n=\nCommandHandlerBase\nfrom_dict\nrelease_target\n release_type = release_target[\"release_type\"]\nrelease_type\n=\nrelease_target\n\"release_type\"\n if release_type == \"release_docker_local_to_aws\":\nif\nrelease_type\n==\n\"release_docker_local_to_aws\"\n await release_docker_local_to_aws_async(command_handler)\nawait\nrelease_docker_local_to_aws_async\ncommand_handler\n else:\nelse\n print(f\"Unknown release_type: {release_type}\")\nprint\nf\"Unknown release_type: {release_type}\"\n{release_type}\n{\nrelease_type\n}\n sys.exit(1)\nsys\nexit\n1\n\n for deploy_target in deployment[\"list_deploy_target\"]:\nfor\ndeploy_target\nin\ndeployment\n\"list_deploy_target\"\n command_handler = CommandHandlerBase.from_dict(deploy_target)\ncommand_handler\n=\nCommandHandlerBase\nfrom_dict\ndeploy_target\n image_tag = get_image_tag()\nimage_tag\n=\nget_image_tag\n dict_env = deploy_target[\"environment_dict\"]\ndict_env\n=\ndeploy_target\n\"environment_dict\"\n if \"account_id\" in deploy_target:\nif\n\"account_id\"\nin\ndeploy_target\n account_id = deploy_target[\"account_id\"]\naccount_id\n=\ndeploy_target\n\"account_id\"\n else:\nelse\n account_id = None\naccount_id\n=\nNone\n if \"region_name\" in deploy_target:\nif\n\"region_name\"\nin\ndeploy_target\n region_name = deploy_target[\"region_name\"]\nregion_name\n=\ndeploy_target\n\"region_name\"\n else:\nelse\n region_name = None\nregion_name\n=\nNone\n\n dict_env[\"IMAGE_TAG\"] = image_tag\ndict_env\n\"IMAGE_TAG\"\n=\nimage_tag\n\n container_name = image_tag.split(\":\")[0].split(\"/\")[-1]\ncontainer_name\n=\nimage_tag\nsplit\n\":\"\n0\nsplit\n\"/\"\n-\n1\n stop_container(command_handler, container_name)\nstop_container\ncommand_handler\ncontainer_name\n remove_container(command_handler, container_name)\nremove_container\ncommand_handler\ncontainer_name\n await start_container_async(command_handler, account_id, region_name, image_tag, container_name, dict_env)\nawait\nstart_container_async\ncommand_handler\naccount_id\nregion_name\nimage_tag\ncontainer_name\ndict_env\n\n\ndef main():\ndef\nmain\n asyncio.run(srai_deploy())\nasyncio\nrun\nsrai_deploy\n\n\nif __name__ == \"__main__\":\nif\n__name__\n==\n\"__main__\"\n main()\nmain\n"}, {"file_name": "srai_core/script/srai_release.py", "changes": "\n\nimport asyncio\nimport\nasyncio\nimport json\nimport\njson\nimport sys\nimport\nsys\n\nfrom srai_core import command_handler_base\nfrom\nsrai_core\nimport\ncommand_handler_base\nfrom srai_core.command_handler_base import CommandHandlerBase\nfrom\nsrai_core\ncommand_handler_base\nimport\nCommandHandlerBase\nfrom srai_core.tools_docker import build_docker_async, release_docker_local_to_aws_async\nfrom\nsrai_core\ntools_docker\nimport\nbuild_docker_async\nrelease_docker_local_to_aws_async\n\n\nasync def srai_release():\nasync\ndef\nsrai_release\n if len(sys.argv) < 2:\nif\nlen\nsys\nargv\n<\n2\n print(\"Usage: deploy_docker deployment_file.json\")\nprint\n\"Usage: deploy_docker deployment_file.json\"\n sys.exit(1)\nsys\nexit\n1\n\n path_deployment_file = sys.argv[1]\npath_deployment_file\n=\nsys\nargv\n1\n with open(path_deployment_file) as f:\nwith\nopen\npath_deployment_file\nas\nf\n deployment = json.load(f)\ndeployment\n=\njson\nload\nf\n for build_target in deployment[\"list_build_target\"]:\nfor\nbuild_target\nin\ndeployment\n\"list_build_target\"\n command_handler = CommandHandlerBase.from_dict(build_target)\ncommand_handler\n=\nCommandHandlerBase\nfrom_dict\nbuild_target\n await build_docker_async(command_handler)\nawait\nbuild_docker_async\ncommand_handler\n\n for release_target in deployment[\"list_release_target\"]:\nfor\nrelease_target\nin\ndeployment\n\"list_release_target\"\n command_handler = CommandHandlerBase.from_dict(release_target)\ncommand_handler\n=\nCommandHandlerBase\nfrom_dict\nrelease_target\n release_type = release_target[\"release_type\"]\nrelease_type\n=\nrelease_target\n\"release_type\"\n if release_type == \"release_docker_local_to_aws\":\nif\nrelease_type\n==\n\"release_docker_local_to_aws\"\n await release_docker_local_to_aws_async(command_handler)\nawait\nrelease_docker_local_to_aws_async\ncommand_handler\n else:\nelse\n print(f\"Unknown release_type: {release_type}\")\nprint\nf\"Unknown release_type: {release_type}\"\n{release_type}\n{\nrelease_type\n}\n sys.exit(1)\nsys\nexit\n1\n\n\ndef main():\ndef\nmain\n asyncio.run(srai_release())\nasyncio\nrun\nsrai_release\n\n\nif __name__ == \"__main__\":\nif\n__name__\n==\n\"__main__\"\n main()\nmain\n"}, {"file_name": "srai_core/script/stop_docker_remote.py", "changes": "\n\nimport os\nimport\nos\nfrom typing import List\nfrom\ntyping\nimport\nList\nfrom srai_core.tools_docker import (\nfrom\nsrai_core\ntools_docker\nimport\n get_client_ssh,\nget_client_ssh\n build_docker,\nbuild_docker\n list_container_name,\nlist_container_name\n get_image_tag,\nget_image_tag\n start_container_ssh,\nstart_container_ssh\n stop_container,\nstop_container\n release_docker_aws,\nrelease_docker_aws\n remove_container,\nremove_container\n)\nfrom srai_core.command_handler_ssh import CommandHandlerSsh\nfrom\nsrai_core\ncommand_handler_ssh\nimport\nCommandHandlerSsh\n\n\ndef main():\ndef\nmain\n hostname = \"18.185.177.93\" # TODO these could even come from boto3\nhostname\n=\n\"18.185.177.93\"\n# TODO these could even come from boto3\n username = \"ubuntu\"\nusername\n=\n\"ubuntu\"\n path_file_pem = \"c:/key/lightsaildefaultkey-eu-central-1.pem\"\npath_file_pem\n=\n\"c:/key/lightsaildefaultkey-eu-central-1.pem\"\n if not os.path.exists(path_file_pem):\nif\nnot\nos\npath\nexists\npath_file_pem\n raise Exception(f\"File {path_file_pem} does not exist\")\nraise\nException\nf\"File {path_file_pem} does not exist\"\n{path_file_pem}\n{\npath_file_pem\n}\n\n client_ssh = get_client_ssh(hostname, username, path_file_pem)\nclient_ssh\n=\nget_client_ssh\nhostname\nusername\npath_file_pem\n command_handler = CommandHandlerSsh(client_ssh)\ncommand_handler\n=\nCommandHandlerSsh\nclient_ssh\n\n image_tag = get_image_tag()\nimage_tag\n=\nget_image_tag\n container_name = image_tag.split(\":\")[0].split(\"/\")[-1]\ncontainer_name\n=\nimage_tag\nsplit\n\":\"\n0\nsplit\n\"/\"\n-\n1\n\n list_container_name_present = list_container_name(client_ssh)\nlist_container_name_present\n=\nlist_container_name\nclient_ssh\n if container_name in list_container_name_present:\nif\ncontainer_name\nin\nlist_container_name_present\n stop_container(command_handler, container_name)\nstop_container\ncommand_handler\ncontainer_name\n remove_container(command_handler, container_name)\nremove_container\ncommand_handler\ncontainer_name\n\n\nif __name__ == \"__main__\":\nif\n__name__\n==\n\"__main__\"\n main()\nmain\n"}, {"file_name": "srai_core/tools_docker.py", "changes": "\n\nimport subprocess\nimport\nsubprocess\nfrom typing import Dict, List\nfrom\ntyping\nimport\nDict\nList\nimport asyncio\nimport\nasyncio\nimport base64\nimport\nbase64\nfrom paramiko import SSHClient\nfrom\nparamiko\nimport\nSSHClient\nfrom typing import Dict, List\nfrom\ntyping\nimport\nDict\nList\n\nimport paramiko\nimport\nparamiko\nfrom srai_core.base_command_handler import BaseCommandHandler\nfrom\nsrai_core\nbase_command_handler\nimport\nBaseCommandHandler\nfrom srai_core.tools_env import get_string_from_env, get_client_ecr\nfrom\nsrai_core\ntools_env\nimport\nget_string_from_env\nget_client_ecr\nfrom paramiko import SSHClient\nfrom\nparamiko\nimport\nSSHClient\n\nfrom srai_core.command_handler_base import CommandHandlerBase\nfrom\nsrai_core\ncommand_handler_base\nimport\nCommandHandlerBase\nfrom srai_core.tools_env import get_client_ecr, get_string_from_env\nfrom\nsrai_core\ntools_env\nimport\nget_client_ecr\nget_string_from_env\n\n\ndef list_ecr_images() -> Dict[str, List[str]]:\ndef\nlist_ecr_images\n->\nDict\nstr\nList\nstr\n return dict_module_init\nreturn\ndict_module_init\n\n\ndef get_client_ssh(\ndef\nget_client_ssh\n hostname: str, username: str, path_file_pem: str, port: int = 22\nhostname\nstr\nusername\nstr\npath_file_pem\nstr\nport\nint\n=\n22\n) -> SSHClient:\n->\nSSHClient\ndef get_client_ssh(hostname: str, username: str, path_file_pem: str, port: int = 22) -> SSHClient:\ndef\nget_client_ssh\nhostname\nstr\nusername\nstr\npath_file_pem\nstr\nport\nint\n=\n22\n->\nSSHClient\n # Initialize SSH client\n# Initialize SSH client\n ssh_client = paramiko.SSHClient()\nssh_client\n=\nparamiko\nSSHClient\n ssh_client.set_missing_host_key_policy(\nssh_client\nset_missing_host_key_policy\n paramiko.AutoAddPolicy()\nparamiko\nAutoAddPolicy\n    )  # Automatically add the server's host key\n# Automatically add the server's host key\n ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # Automatically add the server's host key\nssh_client\nset_missing_host_key_policy\nparamiko\nAutoAddPolicy\n# Automatically add the server's host key\n # Load private key\n# Load private key\n private_key = paramiko.RSAKey(filename=path_file_pem)\nprivate_key\n=\nparamiko\nRSAKey\nfilename\n=\npath_file_pem\n\n return f\"{account_id}.dkr.ecr.{region_name}.amazonaws.com\"\nreturn\nf\"{account_id}.dkr.ecr.{region_name}.amazonaws.com\"\n{account_id}\n{\naccount_id\n}\n{region_name}\n{\nregion_name\n}\n\n\ndef build_docker(command_handler: BaseCommandHandler, path=None) -> None:\ndef\nbuild_docker\ncommand_handler\nBaseCommandHandler\npath\n=\nNone\n->\nNone\n# TODO all should be async\n# TODO all should be async\nasync def build_docker_async(command_handler: CommandHandlerBase, path=None) -> None:\nasync\ndef\nbuild_docker_async\ncommand_handler\nCommandHandlerBase\npath\n=\nNone\n->\nNone\n image_tag = get_image_tag()\nimage_tag\n=\nget_image_tag\n # stop all containers using this image\n# stop all containers using this image\n container_name = image_tag.split(\":\")[0].split(\"/\")[-1]\ncontainer_name\n=\nimage_tag\nsplit\n\":\"\n0\nsplit\n\"/\"\n-\n1\n stop_container(command_handler, container_name)\nstop_container\ncommand_handler\ncontainer_name\n\n # remove all containers using this image\n# remove all containers using this image\n remove_container(command_handler, container_name)\nremove_container\ncommand_handler\ncontainer_name\n\n # remove the image\n# remove the image\n command = f\"docker rmi {image_tag}\"\ncommand\n=\nf\"docker rmi {image_tag}\"\n{image_tag}\n{\nimage_tag\n}\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n # build the image\n# build the image\n if path is not None:\nif\npath\nis\nnot\nNone\n command = (\ncommand\n=\n f\"cd {path}; docker build -t {image_tag} {path}\" # TODO add --no-cache\nf\"cd {path}; docker build -t {image_tag} {path}\"\n{path}\n{\npath\n}\n{image_tag}\n{\nimage_tag\n}\n{path}\n{\npath\n}\n# TODO add --no-cache\n        )\n command = f\"cd {path}; docker build -t {image_tag} {path}\" # TODO add --no-cache\ncommand\n=\nf\"cd {path}; docker build -t {image_tag} {path}\"\n{path}\n{\npath\n}\n{image_tag}\n{\nimage_tag\n}\n{path}\n{\npath\n}\n# TODO add --no-cache\n else:\nelse\n command = f\"docker build -t {image_tag} .\" # TODO add --no-cache\ncommand\n=\nf\"docker build -t {image_tag} .\"\n{image_tag}\n{\nimage_tag\n}\n# TODO add --no-cache\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n\ndef build_docker(command_handler: CommandHandlerBase, path=None) -> None:\ndef\nbuild_docker\ncommand_handler\nCommandHandlerBase\npath\n=\nNone\n->\nNone\n return asyncio.run(build_docker_async(command_handler, path))\nreturn\nasyncio\nrun\nbuild_docker_async\ncommand_handler\npath\n\n\ndef get_ecr_login_token():\ndef\nget_ecr_login_token\n ecr_client = get_client_ecr()\necr_client\n=\nget_client_ecr\n response = ecr_client.get_authorization_token()\nresponse\n=\necr_client\nget_authorization_token\n token = response[\"authorizationData\"][0][\"authorizationToken\"]\ntoken\n=\nresponse\n\"authorizationData\"\n0\n\"authorizationToken\"\n return base64.b64decode(token).decode(\"utf-8\")\nreturn\nbase64\nb64decode\ntoken\ndecode\n\"utf-8\"\n\n\ndef login_docker_to_ecr(\ndef\nlogin_docker_to_ecr\n command_handler: BaseCommandHandler, account_id: str, region_name: str\ncommand_handler\nBaseCommandHandler\naccount_id\nstr\nregion_name\nstr\n) -> None:\n->\nNone\ndef login_docker_to_ecr(command_handler: CommandHandlerBase, account_id: str, region_name: str) -> None:\ndef\nlogin_docker_to_ecr\ncommand_handler\nCommandHandlerBase\naccount_id\nstr\nregion_name\nstr\n->\nNone\n token = get_ecr_login_token()\ntoken\n=\nget_ecr_login_token\n username, password = token.split(\":\")\nusername\npassword\n=\ntoken\nsplit\n\":\"\n registry_url = get_registry_url(account_id, region_name)\nregistry_url\n=\nget_registry_url\naccount_id\nregion_name\n ecr_client.create_repository(repositoryName=image_name)\necr_client\ncreate_repository\nrepositoryName\n=\nimage_name\n\n\ndef release_docker_aws(command_handler: BaseCommandHandler) -> None:\ndef\nrelease_docker_aws\ncommand_handler\nBaseCommandHandler\n->\nNone\nasync def release_docker_local_to_aws_async(command_handler: CommandHandlerBase) -> None:\nasync\n \ndef\nrelease_docker_local_to_aws_async\ncommand_handler\nCommandHandlerBase\n->\nNone\n image_tag = get_image_tag()\nimage_tag\n=\nget_image_tag\n account_id = get_string_from_env(\"AWS_ACCOUNT_ID\")\naccount_id\n=\nget_string_from_env\n\"AWS_ACCOUNT_ID\"\n region_name = get_string_from_env(\"AWS_REGION_NAME\")\nregion_name\n=\nget_string_from_env\n\"AWS_REGION_NAME\"\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n\ndef release_docker_aws_local(command_handler: CommandHandlerBase) -> None:\ndef\nrelease_docker_aws_local\ncommand_handler\nCommandHandlerBase\n->\nNone\n return asyncio.run(release_docker_local_to_aws_async(command_handler))\nreturn\nasyncio\nrun\nrelease_docker_local_to_aws_async\ncommand_handler\n\n\ndef start_container_command(\ndef\nstart_container_command\n image_tag: str,\nimage_tag\nstr\n container_name: str,\ncontainer_name\nstr\n return command\nreturn\ncommand\n\n\ndef start_container_local(\ndef\nstart_container_local\ndef start_container(\ndef\nstart_container\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n account_id: str,\naccount_id\nstr\n region_name: str,\nregion_name\nstr\n image_tag: str,\nimage_tag\nstr\n container_name: str,\ncontainer_name\nstr\n dict_env: Dict[str, str],\ndict_env\nDict\nstr\nstr\n) -> None:\n->\nNone\n command = start_container_command(image_tag, container_name, dict_env)\ncommand\n \n=\n \nstart_container_command\n(\nimage_tag\n, \ncontainer_name\n, \ndict_env\n)\n print(command)\nprint\n(\ncommand\n subprocess.run(command, shell=True)\nsubprocess\n.\nrun\n(\ncommand\n, \nshell\n=\nTrue\n return asyncio.run(\nreturn\n \nasyncio\n.\nrun\n(\n  start_container_async(command_handler, account_id, region_name, image_tag, container_name, dict_env)\n \nstart_container_async\n(\ncommand_handler\n, \naccount_id\n, \nregion_name\n, \nimage_tag\n, \ncontainer_name\n, \ndict_env\n    )\n\n\ndef start_container_ssh(\ndef\nstart_container_ssh\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n account_id: str,\naccount_id\nstr\n region_name: str,\nregion_name\nstr\nasync def start_container_async(\nasync\n \ndef\nstart_container_async\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n account_id: str, # TODO remove\naccount_id\nstr\n \n# TODO remove\n region_name: str, # TODO remove\nregion_name\nstr\n \n# TODO remove\n image_tag: str,\nimage_tag\nstr\n container_name: str,\ncontainer_name\nstr\n dict_env: Dict[str, str],\ndict_env\nDict\nstr\nstr\n) -> None:\n->\nNone\n command = login_docker_to_ecr(command_handler, account_id, region_name)\ncommand\n=\nlogin_docker_to_ecr\ncommand_handler\naccount_id\nregion_name\n if account_id is not None and region_name is not None:\nif\naccount_id\nis\nnot\nNone\nand\nregion_name\nis\nnot\nNone\n command = pull_image_command(account_id, region_name)\ncommand\n=\npull_image_command\naccount_id\nregion_name\n # Execute the command\n# Execute the command\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n command = pull_image_command(account_id, region_name)\ncommand\n=\npull_image_command\naccount_id\nregion_name\n # Execute the command\n# Execute the command\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n registry_url = get_registry_url(account_id, region_name)\nregistry_url\n=\nget_registry_url\naccount_id\nregion_name\n registry_url = get_registry_url(account_id, region_name)\nregistry_url\n=\nget_registry_url\naccount_id\nregion_name\n command = start_container_command(image_tag, container_name, dict_env)\ncommand\n=\nstart_container_command\nimage_tag\ncontainer_name\ndict_env\n command = command.replace(image_tag, f\"{registry_url}/{image_tag}\")\ncommand\n=\ncommand\nreplace\nimage_tag\nf\"{registry_url}/{image_tag}\"\n{registry_url}\n{\nregistry_url\n}\n{image_tag}\n{\nimage_tag\n}\n if account_id is not None and region_name is not None:\nif\naccount_id\nis\nnot\nNone\nand\nregion_name\nis\nnot\nNone\n command = command.replace(image_tag, f\"{registry_url}/{image_tag}\")\ncommand\n=\ncommand\nreplace\nimage_tag\nf\"{registry_url}/{image_tag}\"\n{registry_url}\n{\nregistry_url\n}\n{image_tag}\n{\nimage_tag\n}\n # Execute the command\n# Execute the command\n command_handler.execute(command)\ncommand_handler\nexecute\ncommand\n\n\n\ndef list_container_status(\ndef\nlist_container_status\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n) -> dict:\n->\ndict\n # Command to check if the Docker container is running\n# Command to check if the Docker container is running\n command = \"docker ps -a\"\ncommand\n=\n\"docker ps -a\"\n\n\ndef container_logs(\ndef\ncontainer_logs\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n container_name: str,\ncontainer_name\nstr\n logs_count: int,\nlogs_count\nint\n) -> List[str]:\n->\nList\nstr\n\n\ndef stop_container(\ndef\nstop_container\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n container_name: str,\ncontainer_name\nstr\n) -> None:\n->\nNone\n # Command to stop the Docker container\n# Command to stop the Docker container\n\n\ndef remove_container(\ndef\nremove_container\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n container_name: str,\ncontainer_name\nstr\n) -> None:\n->\nNone\n # Command to stop the Docker container\n# Command to stop the Docker container\n\n\ndef clone_repository(\ndef\nclone_repository\n command_handler: BaseCommandHandler,\ncommand_handler\nBaseCommandHandler\n command_handler: CommandHandlerBase,\ncommand_handler\nCommandHandlerBase\n package_name: str,\npackage_name\nstr\n path: str,\npath\nstr\n git_token: str,\ngit_token\nstr\n"}]}